diff -Nru nextcloud.bak/apps/oauth2/appinfo/routes.php nextcloud/apps/oauth2/appinfo/routes.php
--- nextcloud.bak/apps/oauth2/appinfo/routes.php	2021-09-29 23:18:49.000000000 +0200
+++ nextcloud/apps/oauth2/appinfo/routes.php	2021-10-14 17:11:53.287859244 +0200
@@ -43,5 +43,10 @@
 			'url' => '/api/v1/token',
 			'verb' => 'POST'
 		],
+		[
+			'name' => 'OpenIdConnect#userinfo',
+			'url' => '/api/v1/userinfo',
+			'verb' => 'GET'
+		],
 	],
 ];
diff -Nru nextcloud.bak/apps/oauth2/composer/composer/autoload_classmap.php nextcloud/apps/oauth2/composer/composer/autoload_classmap.php
--- nextcloud.bak/apps/oauth2/composer/composer/autoload_classmap.php	2021-09-29 23:18:49.000000000 +0200
+++ nextcloud/apps/oauth2/composer/composer/autoload_classmap.php	2021-10-14 17:11:53.283859268 +0200
@@ -9,6 +9,7 @@
     'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
     'OCA\\OAuth2\\Controller\\LoginRedirectorController' => $baseDir . '/../lib/Controller/LoginRedirectorController.php',
     'OCA\\OAuth2\\Controller\\OauthApiController' => $baseDir . '/../lib/Controller/OauthApiController.php',
+    'OCA\\OAuth2\\Controller\\OpenIdConnectController' => $baseDir . '/../lib/Controller/OpenIdConnectController.php',
     'OCA\\OAuth2\\Controller\\SettingsController' => $baseDir . '/../lib/Controller/SettingsController.php',
     'OCA\\OAuth2\\Db\\AccessToken' => $baseDir . '/../lib/Db/AccessToken.php',
     'OCA\\OAuth2\\Db\\AccessTokenMapper' => $baseDir . '/../lib/Db/AccessTokenMapper.php',
diff -Nru nextcloud.bak/apps/oauth2/composer/composer/autoload_static.php nextcloud/apps/oauth2/composer/composer/autoload_static.php
--- nextcloud.bak/apps/oauth2/composer/composer/autoload_static.php	2021-09-29 23:18:49.000000000 +0200
+++ nextcloud/apps/oauth2/composer/composer/autoload_static.php	2021-10-14 17:11:53.287859244 +0200
@@ -24,6 +24,7 @@
         'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
         'OCA\\OAuth2\\Controller\\LoginRedirectorController' => __DIR__ . '/..' . '/../lib/Controller/LoginRedirectorController.php',
         'OCA\\OAuth2\\Controller\\OauthApiController' => __DIR__ . '/..' . '/../lib/Controller/OauthApiController.php',
+        'OCA\\OAuth2\\Controller\\OpenIdConnectController' => __DIR__ . '/..' . '/../lib/Controller/OpenIdConnectController.php',
         'OCA\\OAuth2\\Controller\\SettingsController' => __DIR__ . '/..' . '/../lib/Controller/SettingsController.php',
         'OCA\\OAuth2\\Db\\AccessToken' => __DIR__ . '/..' . '/../lib/Db/AccessToken.php',
         'OCA\\OAuth2\\Db\\AccessTokenMapper' => __DIR__ . '/..' . '/../lib/Db/AccessTokenMapper.php',
diff -Nru nextcloud.bak/apps/oauth2/lib/Controller/OauthApiController.php nextcloud/apps/oauth2/lib/Controller/OauthApiController.php
--- nextcloud.bak/apps/oauth2/lib/Controller/OauthApiController.php	2021-09-29 23:18:49.000000000 +0200
+++ nextcloud/apps/oauth2/lib/Controller/OauthApiController.php	2021-10-14 19:32:16.321984345 +0200
@@ -119,6 +119,14 @@
 			], Http::STATUS_BAD_REQUEST);
 		}
 
+        // trick for compatibility with some oauth clients - BeTa
+        if (!array_key_exists('PHP_AUTH_USER', $this->request->server) || !array_key_exists('PHP_AUTH_PW', $this->request->server)) {
+            if (array_key_exists('client_id', $_POST) && array_key_exists('client_secret', $_POST)) {
+                $this->request->server['PHP_AUTH_USER'] = $_POST['client_id'];
+                $this->request->server['PHP_AUTH_PW'] = $_POST['client_secret'];
+            }
+        }
+
 		if (isset($this->request->server['PHP_AUTH_USER'])) {
 			$client_id = $this->request->server['PHP_AUTH_USER'];
 			$client_secret = $this->request->server['PHP_AUTH_PW'];
diff -Nru nextcloud.bak/apps/oauth2/lib/Controller/OauthApiController.php.orig nextcloud/apps/oauth2/lib/Controller/OauthApiController.php.orig
--- nextcloud.bak/apps/oauth2/lib/Controller/OauthApiController.php.orig	1970-01-01 01:00:00.000000000 +0100
+++ nextcloud/apps/oauth2/lib/Controller/OauthApiController.php.orig	2021-09-29 23:18:49.000000000 +0200
@@ -0,0 +1,180 @@
+<?php
+
+declare(strict_types=1);
+
+/**
+ * @copyright Copyright (c) 2017 Lukas Reschke <lukas@statuscode.ch>
+ *
+ * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Lukas Reschke <lukas@statuscode.ch>
+ * @author Roeland Jago Douma <roeland@famdouma.nl>
+ *
+ * @license GNU AGPL version 3 or any later version
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+namespace OCA\OAuth2\Controller;
+
+use OC\Authentication\Exceptions\ExpiredTokenException;
+use OC\Authentication\Exceptions\InvalidTokenException;
+use OC\Authentication\Token\IProvider as TokenProvider;
+use OC\Security\Bruteforce\Throttler;
+use OCA\OAuth2\Db\AccessTokenMapper;
+use OCA\OAuth2\Db\ClientMapper;
+use OCA\OAuth2\Exceptions\AccessTokenNotFoundException;
+use OCA\OAuth2\Exceptions\ClientNotFoundException;
+use OCP\AppFramework\Controller;
+use OCP\AppFramework\Http;
+use OCP\AppFramework\Http\JSONResponse;
+use OCP\AppFramework\Utility\ITimeFactory;
+use OCP\IRequest;
+use OCP\Security\ICrypto;
+use OCP\Security\ISecureRandom;
+
+class OauthApiController extends Controller {
+	/** @var AccessTokenMapper */
+	private $accessTokenMapper;
+	/** @var ClientMapper */
+	private $clientMapper;
+	/** @var ICrypto */
+	private $crypto;
+	/** @var TokenProvider */
+	private $tokenProvider;
+	/** @var ISecureRandom */
+	private $secureRandom;
+	/** @var ITimeFactory */
+	private $time;
+	/** @var Throttler */
+	private $throttler;
+
+	public function __construct(string $appName,
+								IRequest $request,
+								ICrypto $crypto,
+								AccessTokenMapper $accessTokenMapper,
+								ClientMapper $clientMapper,
+								TokenProvider $tokenProvider,
+								ISecureRandom $secureRandom,
+								ITimeFactory $time,
+								Throttler $throttler) {
+		parent::__construct($appName, $request);
+		$this->crypto = $crypto;
+		$this->accessTokenMapper = $accessTokenMapper;
+		$this->clientMapper = $clientMapper;
+		$this->tokenProvider = $tokenProvider;
+		$this->secureRandom = $secureRandom;
+		$this->time = $time;
+		$this->throttler = $throttler;
+	}
+
+	/**
+	 * @PublicPage
+	 * @NoCSRFRequired
+	 *
+	 * @param string $grant_type
+	 * @param string $code
+	 * @param string $refresh_token
+	 * @param string $client_id
+	 * @param string $client_secret
+	 * @return JSONResponse
+	 */
+	public function getToken($grant_type, $code, $refresh_token, $client_id, $client_secret): JSONResponse {
+
+		// We only handle two types
+		if ($grant_type !== 'authorization_code' && $grant_type !== 'refresh_token') {
+			return new JSONResponse([
+				'error' => 'invalid_grant',
+			], Http::STATUS_BAD_REQUEST);
+		}
+
+		// We handle the initial and refresh tokens the same way
+		if ($grant_type === 'refresh_token') {
+			$code = $refresh_token;
+		}
+
+		try {
+			$accessToken = $this->accessTokenMapper->getByCode($code);
+		} catch (AccessTokenNotFoundException $e) {
+			return new JSONResponse([
+				'error' => 'invalid_request',
+			], Http::STATUS_BAD_REQUEST);
+		}
+
+		try {
+			$client = $this->clientMapper->getByUid($accessToken->getClientId());
+		} catch (ClientNotFoundException $e) {
+			return new JSONResponse([
+				'error' => 'invalid_request',
+			], Http::STATUS_BAD_REQUEST);
+		}
+
+		if (isset($this->request->server['PHP_AUTH_USER'])) {
+			$client_id = $this->request->server['PHP_AUTH_USER'];
+			$client_secret = $this->request->server['PHP_AUTH_PW'];
+		}
+
+		// The client id and secret must match. Else we don't provide an access token!
+		if ($client->getClientIdentifier() !== $client_id || $client->getSecret() !== $client_secret) {
+			return new JSONResponse([
+				'error' => 'invalid_client',
+			], Http::STATUS_BAD_REQUEST);
+		}
+
+		$decryptedToken = $this->crypto->decrypt($accessToken->getEncryptedToken(), $code);
+
+		// Obtain the appToken assoicated
+		try {
+			$appToken = $this->tokenProvider->getTokenById($accessToken->getTokenId());
+		} catch (ExpiredTokenException $e) {
+			$appToken = $e->getToken();
+		} catch (InvalidTokenException $e) {
+			//We can't do anything...
+			$this->accessTokenMapper->delete($accessToken);
+			return new JSONResponse([
+				'error' => 'invalid_request',
+			], Http::STATUS_BAD_REQUEST);
+		}
+
+		// Rotate the apptoken (so the old one becomes invalid basically)
+		$newToken = $this->secureRandom->generate(72, ISecureRandom::CHAR_UPPER.ISecureRandom::CHAR_LOWER.ISecureRandom::CHAR_DIGITS);
+
+		$appToken = $this->tokenProvider->rotate(
+			$appToken,
+			$decryptedToken,
+			$newToken
+		);
+
+		// Expiration is in 1 hour again
+		$appToken->setExpires($this->time->getTime() + 3600);
+		$this->tokenProvider->updateToken($appToken);
+
+		// Generate a new refresh token and encrypt the new apptoken in the DB
+		$newCode = $this->secureRandom->generate(128, ISecureRandom::CHAR_UPPER.ISecureRandom::CHAR_LOWER.ISecureRandom::CHAR_DIGITS);
+		$accessToken->setHashedCode(hash('sha512', $newCode));
+		$accessToken->setEncryptedToken($this->crypto->encrypt($newToken, $newCode));
+		$this->accessTokenMapper->update($accessToken);
+
+		$this->throttler->resetDelay($this->request->getRemoteAddress(), 'login', ['user' => $appToken->getUID()]);
+
+		return new JSONResponse(
+			[
+				'access_token' => $newToken,
+				'token_type' => 'Bearer',
+				'expires_in' => 3600,
+				'refresh_token' => $newCode,
+				'user_id' => $appToken->getUID(),
+			]
+		);
+	}
+}
diff -Nru nextcloud.bak/apps/oauth2/lib/Controller/OpenIdConnectController.php nextcloud/apps/oauth2/lib/Controller/OpenIdConnectController.php
--- nextcloud.bak/apps/oauth2/lib/Controller/OpenIdConnectController.php	1970-01-01 01:00:00.000000000 +0100
+++ nextcloud/apps/oauth2/lib/Controller/OpenIdConnectController.php	2021-10-14 18:18:56.040046913 +0200
@@ -0,0 +1,117 @@
+<?php
+/**
+ * @author Thomas Müller <thomas.mueller@tmit.eu>
+ * @copyright Copyright (c) 2018, ownCloud GmbH
+ * @license AGPL-3.0
+ *
+ * This code is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License, version 3,
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License, version 3,
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+namespace OCA\OAuth2\Controller;
+
+use OCP\AppFramework\ApiController;
+use OCP\AppFramework\Http\JSONResponse;
+
+use OCP\IAvatarManager;
+use OCP\IRequest;
+use OCP\IURLGenerator;
+use OCP\IUser;
+use OCP\IUserSession;
+
+class OpenIdConnectController extends ApiController {
+
+    /** @var IURLGenerator */
+    private $urlGenerator;
+
+    /** @var IUserSession */
+    private $userSession;
+
+    /** @var IAvatarManager */
+    private $avatarManager;
+
+    /**
+     * OAuthApiController constructor.
+     *
+     * @param string $AppName The app's name.
+     * @param IRequest $request The request.
+     * @param IUserSession $userSession
+     * @param IURLGenerator $urlGenerator The URL generator.
+     * @param IAvatarManager $avatarManager
+     */
+    public function __construct($AppName, IRequest $request,
+                                IUserSession $userSession,
+                                IURLGenerator $urlGenerator,
+                                IAvatarManager $avatarManager) {
+        parent::__construct($AppName, $request);
+
+        $this->userSession = $userSession;
+        $this->urlGenerator = $urlGenerator;
+        $this->avatarManager = $avatarManager;
+    }
+
+    /**
+     * Implements OpenID Connect UserInfo endpoint
+     *
+     * @see https://connect2id.com/products/server/docs/api/userinfo
+     *
+     * @return JSONResponse The claims as JSON Object.
+     *
+     * @PublicPage
+     * @NoAdminRequired
+     * @NoCSRFRequired
+     * @CORS
+     * @throws \Exception
+     */
+    public function userInfo() {
+        $user = $this->userSession->getUser();
+        if ($user === null) {
+            // should never happen
+            throw new \RuntimeException('Not logged in');
+        }
+
+        $data = [
+            'sub' => $user->getUID()
+        ];
+        $avatarUrl = $this->getAvatarUrl($user);
+        if ($avatarUrl !== null) {
+            $data['picture'] = $avatarUrl;
+        }
+        if ($user->getDisplayName() !== null) {
+            $data['name'] = $user->getDisplayName();
+        }
+        if ($user->getEMailAddress() !== null) {
+            $data['email'] = $user->getEMailAddress();
+        }
+        return new JSONResponse($data);
+    }
+
+    /**
+     * @param IUser $user
+     * @return string | null
+     * @throws \Exception
+     * @throws \OCP\Files\NotFoundException
+     */
+    public function getAvatarUrl($user) {
+        $avatar = $this->avatarManager->getAvatar($user->getUID());
+        if (!$avatar->exists()) {
+            return null;
+        }
+
+        $avatarUrl = $this->urlGenerator->linkTo('', 'remote.php');
+        $avatarUrl .= "/dav/avatars/{$user->getUID()}/96.jpeg";
+
+        $avatarUrl = $this->urlGenerator->getAbsoluteURL($avatarUrl);
+        return $avatarUrl;
+    }
+}
+
diff -Nru nextcloud.bak/index.php nextcloud/index.php 
--- nextcloud.bak/index.php	2021-09-29 23:18:50.000000000 +0200
+++ nextcloud/index.php	2021-10-14 19:48:00.996389280 +0200
@@ -30,6 +30,15 @@
  */
 require_once __DIR__ . '/lib/versioncheck.php';
 
+// trick for compatibility with some oauth clients - BeTa
+if (array_key_exists('PHP_AUTH_USER', $_SERVER) || array_key_exists('PHP_AUTH_PW', $_SERVER)) {
+    $_POST['client_id'] = $_SERVER['PHP_AUTH_USER'];
+    $_POST['client_secret'] = $_SERVER['PHP_AUTH_PW'];
+    unset($_SERVER['PHP_AUTH_USER']);
+    unset($_SERVER['PHP_AUTH_PW']);
+    unset($_SERVER['HTTP_AUTHORIZATION']);
+}
+
 try {
 	require_once __DIR__ . '/lib/base.php';
